****** Legacy File I/O Code ******
***** Interoperability With Legacy Code *****
Prior to the Java SE 7 release, the java.io.File class was the mechanism used
for file I/O, but it had several drawbacks.
    * Many methods didn't throw exceptions when they failed, so it was
      impossible to obtain a useful error message. For example, if a file
      deletion failed, the program would receive a "delete fail" but wouldn't
      know if it was because the file didn't exist, the user didn't have
      permissions, or there was some other problem.
    * The rename method didn't work consistently across platforms.
    * There was no real support for symbolic links.
    * More support for metadata was desired, such as file permissions, file
      owner, and other security attributes.
    * Accessing file metadata was inefficient.
    * Many of the File methods didn't scale. Requesting a large directory
      listing over a server could result in a hang. Large directories could
      also cause memory resource problems, resulting in a denial of service.
    * It was not possible to write reliable code that could recursively walk a
      file tree and respond appropriately if there were circular symbolic
      links.
Perhaps you have legacy code that uses java.io.File and would like to take
advantage of the java.nio.file.Path functionality with minimal impact to your
code.
The java.io.File class provides the toPath method, which converts an old style
File instance to a java.nio.file.Path instance, as follows:
Path input = file.toPath();
You can then take advantage of the rich feature set available to the Path
class.
For example, assume you had some code that deleted a file:
file.delete();
You could modify this code to use the Files.delete method, as follows:
Path fp = file.toPath();
Files.delete(fp);
Conversely, the Path.toFile method constructs a java.io.File object for a Path
object.
***** Mapping java.io.File Functionality to java.nio.file *****
Because the Java implementation of file I/O has been completely re-architected
in the Java SE 7 release, you cannot swap one method for another method. If you
want to use the rich functionality offered by the java.nio.file package, your
easiest solution is to use the File.toPath method as suggested in the previous
section. However, if you do not want to use that approach or it is not
sufficient for your needs, you must rewrite your file I/O code.
There is no one-to-one correspondence between the two APIs, but the following
table gives you a general idea of what functionality in the java.io.File API
maps to in the java.nio.file API and tells you where you can obtain more
information.
 _____________________________________________________________________________
|java.io.File            |java.nio.file Functionality   |Tutorial Coverage    |
|Functionality___________|______________________________|_____________________|
|java.io.File____________|java.nio.file.Path____________|The_Path_Class_______|
|java.io.RandomAccessFile|The SeekableByteChannel       |Random_Access_Files  |
|________________________|functionality.________________|_____________________|
|                        |Files.isReadable,             |                     |
|                        |Files.isWritable, and         |                     |
|                        |Files.isExecutable.           |Checking_a_File_or   |
|File.canRead, canWrite, |On UNIX file systems, the     |Directory            |
|canExecute              |Managing_Metadata_(File_and   |Managing_Metadata    |
|                        |File_Store_Attributes) package|                     |
|                        |is used to check the nine file|                     |
|________________________|permissions.__________________|_____________________|
|                        |Files.isDirectory(Path,       |                     |
|File.isDirectory(),     |LinkOption...),               |                     |
|File.isFile(), and      |Files.isRegularFile(Path,     |Managing_Metadata    |
|File.length()           |LinkOption...), and Files.size|                     |
|________________________|(Path)________________________|_____________________|
|File.lastModified() and |Files.getLastModifiedTime     |                     |
|File.setLastModified    |(Path, LinkOption...) and     |Managing_Metadata    |
|(long)                  |Files.setLastMOdifiedTime     |                     |
|________________________|(Path,_FileTime)______________|_____________________|
|The File methods that   |These methods are replaced by |                     |
|set various attributes: |the Files method setAttribute |                     |
|setExecutable,          |(Path, String, Object,        |Managing_Metadata    |
|setReadable,            |LinkOption...).               |                     |
|setReadOnly,_setWritable|______________________________|_____________________|
|new File(parent,        |parent.resolve("newfile")     |Path_Operations      |
|"newfile")______________|______________________________|_____________________|
|File.renameTo           |Files.move                    |Moving_a_File_or     |
|________________________|______________________________|Directory____________|
|File.delete             |Files.delete                  |Deleting_a_File_or   |
|________________________|______________________________|Directory____________|
|File.createNewFile______|Files.createFile______________|Creating_Files_______|
|                        |Replaced by the               |                     |
|File.deleteOnExit       |DELETE_ON_CLOSE option        |Creating_Files       |
|                        |specified in the createFile   |                     |
|________________________|method._______________________|_____________________|
|                        |                              |Creating_Files       |
|                        |Files.createTempFile(Path,    |Creating_and_Writing |
|                        |String, FileAttributes<?>),   |a_File_by_Using      |
|File.createTempFile     |Files.createTempFile(Path,    |Stream_I/O           |
|                        |String, String,               |Reading_and_Writing  |
|                        |FileAttributes<?>)            |Files_by_Using       |
|________________________|______________________________|Channel_I/O__________|
|                        |Files.exists and              |Verifying_the        |
|File.exists             |Files.notExists               |Existence_of_a_File  |
|________________________|______________________________|or_Directory_________|
|File.compareTo and      |Path.compareTo and equals     |Comparing_Two_Paths  |
|equals__________________|______________________________|_____________________|
|File.getAbsolutePath and|Path.toAbsolutePath           |Converting_a_Path    |
|getAbsoluteFile_________|______________________________|_____________________|
|                        |                              |Converting_a_Path_   |
|File.getCanonicalPath   |                              |(toRealPath)         |
|and getCanonicalFile    |Path.toRealPath or normalize  |Removing_Redundancies|
|                        |                              |From_a_Path_         |
|________________________|______________________________|(normalize)__________|
|File.toURI______________|Path.toURI____________________|Converting_a_Path____|
|                        |                              |Retrieving           |
|File.isHidden           |Files.isHidden                |Information_About_the|
|________________________|______________________________|Path_________________|
|File.list and listFiles |Path.newDirectoryStream       |Listing_a_Directory's|
|________________________|______________________________|Contents_____________|
|File.mkdir_and_mkdirs___|Files.createDirectory_________|Creating_a_Directory_|
|                        |                              |Listing_a_File       |
|File.listRoots          |FileSystem.getRootDirectories |System's_Root        |
|________________________|______________________________|Directories__________|
|File.getTotalSpace,     |FileStore.getTotalSpace,      |                     |
|File.getFreeSpace,      |FileStore.getUnallocatedSpace,|File_Store_Attributes|
|File.getUsableSpace     |FileStore.getUsableSpace,     |                     |
|________________________|FileStore.getTotalSpace_______|_____________________|
